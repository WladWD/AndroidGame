#include "ResourceLoad.h"
#include "ShaderBarrierBase.h"
#include "Mesh.h"
#include "LoadStructure.h"
#include "Object.h"
#include "Cookie.h"
#include "BoundingObjectStructSphere.h"
#include "Collision.h"
#include "MCamera.h"
#include "Barrier.h"
#include <random>

#pragma once
namespace Barrier
{
	class BarrierBase
	{
	protected:
		//////////////////////////////////////////////////////////////////////////////////
		const float PI;
		//////////////////////////////////////////////////////////////////////////////////
		//v2.0
		Collision::ModelBase *mModelDraw;
		Collision::LowPolyModelInstance *mLowpolyModel;
		Collision::BoundingAABBInstance *mBounding;
		//////////////////////////////////////////////////////////////////////////////////
		glm::mat4 mWorld;
		//////////////////////////////////////////////////////////////////////////////////
		//Bounding::Object *mBounding;
		//Bounding::BoundingObjectStructAABB *mAABB;
		//////////////////////////////////////////////////////////////////////////////////
		Camera::MCamera *cCamera;
		//////////////////////////////////////////////////////////////////////////////////
		/*Resource::ImageResource *mImagesResource;
		//////////////////////////////////////////////////////////////////////////////////
		Resource::ModelObject *mObjects;
		GLuint mDrawObjectCount;
		//////////////////////////////////////////////////////////////////////////////////
		GLenum mIndexFormat;
		//////////////////////////////////////////////////////////////////////////////////
		GLuint mVertexBuffer;//vertex buffer object
		GLuint mIndexBuffer;//element array object
		*/
		//////////////////////////////////////////////////////////////////////////////////
		//glm::mat4 mWorld_OOBB;
		//////////////////////////////////////////////////////////////////////////////////
		float mDeltaConst;
		//////////////////////////////////////////////////////////////////////////////////
		float fAngle, fHeight;
		//////////////////////////////////////////////////////////////////////////////////
		//Shader::ShaderBarrierBase *mShader;
		//////////////////////////////////////////////////////////////////////////////////
		//void Init(void);
		//////////////////////////////////////////////////////////////////////////////////
		//void DeleteResources(void);
		//void InitializeResources(Bounding::Object *mObjects);
		//////////////////////////////////////////////////////////////////////////////////
		virtual void InitAttrib(void) = 0;
		//virtual void UpdateRotate(float fDeltaTime, float fGlobalTime) = 0;
	public:
		BarrierBase(Draw::Barrier *mBarrier, Camera::MCamera *cCamera, float fHeight); //Bounding::Object *mObjects
		virtual ~BarrierBase();
		//////////////////////////////////////////////////////////////////////////////////
		virtual void Update(float fDeltaTime, float fGlobalTime, float fDeltaHeight) = 0;
		//////////////////////////////////////////////////////////////////////////////////
		bool Intersect(const Draw::CookieCollisionStruct &mCookieCollision);
		//////////////////////////////////////////////////////////////////////////////////
		virtual void Draw(void) = 0;
		//////////////////////////////////////////////////////////////////////////////////
		virtual void Present(float fHeight) = 0;
		//////////////////////////////////////////////////////////////////////////////////
		float GetCurrentHeight(void);
	};
}

