#include "ObjectBase.h"

#pragma once
namespace Bounding
{
	//only GLushort - index and VTMesh vertex
	class Object : public ObjectBase
	{
	protected:
		//////////////////////////////////////////////////////////////////////////////////
		std::string mResourceName;
		//////////////////////////////////////////////////////////////////////////////////
		//VTMesh only
		Mesh::VTMesh *vertexBuffer;
		GLushort *indexBuffer;
		//////////////////////////////////////////////////////////////////////////////////
		//void PackToOOBB(void);
		void Init(std::string mResourceName, Resource::ResourceBase *mResourceLoad);
		//////////////////////////////////////////////////////////////////////////////////
		//bool OOBBIntersect(const Mesh::OOBB *mObject1, const Mesh::OOBB *mObject2 , const glm::mat4* mWorld1, const glm::mat4 *mWorld2);
	public:
		Object(Resource::ResourceBase * mResourceLoad, std::string mResourceName);
		~Object();
		//////////////////////////////////////////////////////////////////////////////////
		void ReleaseResource(void);
		void ReCreateResource(Resource::ResourceBase *resourceLoad);
		//////////////////////////////////////////////////////////////////////////////////
		Mesh::VTMesh *GetVertexBuffer();
		GLushort *GetIndexBuffer();
		//////////////////////////////////////////////////////////////////////////////////
	};
}
