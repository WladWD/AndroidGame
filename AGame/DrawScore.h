#include "DrawBitmap.h"
#include "DrawDiget.h"

#pragma once
namespace DrawScore
{
	class DrawScore
	{
		////////////////////////////////////////////////////////////////////////////////////////////
		DrawBitmap *mDrawBitmap;
		DrawDiget *mDrawDiget;
		////////////////////////////////////////////////////////////////////////////////////////////
		QuadBuffer *mQuadBuffer;
		////////////////////////////////////////////////////////////////////////////////////////////
		Shader::ShaderDrawBitmap *mDrawBitmapShader;
		Shader::ShaderDrawText *mDrawTextShader;
		////////////////////////////////////////////////////////////////////////////////////////////
		DigetTextureResource *mTextureResourceText;
		TextureResource::ResourceTextureBase *mTextureResourceBitmap;
		////////////////////////////////////////////////////////////////////////////////////////////
		glm::vec4 mDigetsRect, mBitmapRect;
		uint32_t mDigetCount;
		////////////////////////////////////////////////////////////////////////////////////////////
		vector<char> mDigets;
		float mWightDiget;
		glm::vec4 mOffsetScaleDiget;
		////////////////////////////////////////////////////////////////////////////////////////////
		void Init(Resource::MapResource *mMapResource, Resource::TextureLoad *textureLoad, Resource::ResourceBase *resourceLoad);
		void InitDigets(uint32_t mDiget);
		////////////////////////////////////////////////////////////////////////////////////////////
		void DrawLeft(void);
		void DrawRight(void);
	public:
		DrawScore(Resource::MapResource *mMapResource, Resource::TextureLoad *textureLoad, Resource::ResourceBase *resourceLoad,
			std::string mDigetTextureName, string mBitmapTextureName,
			glm::vec4 mDigetsRect, uint32_t mDigetCount, glm::vec4 mBitmapRect);
		~DrawScore();
		////////////////////////////////////////////////////////////////////////////////////////////
		void Draw(uint32_t mDiget, bool ToLeftAlign);
		////////////////////////////////////////////////////////////////////////////////////////////
	};
}

