#include "BarrierBase.h"
#include "ShaderBarrierRotor.h"

//#define Test

#pragma once
namespace Barrier
{
	class DrawBarrierRotor : public BarrierBase
	{
		//////////////////////////////////////////////////////////////////////////////////
		glm::vec2 fFog;
		const float *fFogColor;
		//////////////////////////////////////////////////////////////////////////////////
		float fVelMin, fVelMax, fVel;//2*pi/ms
		//////////////////////////////////////////////////////////////////////////////////
		glm::mat4 mRotateMatrix, mTranslateMatrix;
		//////////////////////////////////////////////////////////////////////////////////
		//glm::mat4 mWorldTransform;
		//////////////////////////////////////////////////////////////////////////////////
		Shader::ShaderBarrierRotor *mShader;
		//////////////////////////////////////////////////////////////////////////////////
		void InitAttrib(void);
		void UpdateRotate(float fDeltaTime, float fGlobalTime);
		//////////////////////////////////////////////////////////////////////////////////
#ifdef Test
		GLuint vb, ib;
		void InitTMP();
#endif
		//////////////////////////////////////////////////////////////////////////////////
	public:
		DrawBarrierRotor(Draw::Barrier *mBarrier, Shader::ShaderBarrierBase *mShader, Camera::MCamera *cCamera,
			float fHeight, float fVelMin, float fVelMax, glm::vec2 fFog, const float *fFogColor);//rotate per second
		//Bounding::Object *mObjects
		~DrawBarrierRotor();
		//////////////////////////////////////////////////////////////////////////////////
		void Update(float fDeltaTime, float fGlobalTime, float fDeltaHeight);
		//////////////////////////////////////////////////////////////////////////////////
		void Draw(void);
		//////////////////////////////////////////////////////////////////////////////////
		void Present(float fHeight);
		//////////////////////////////////////////////////////////////////////////////////
	};
}

