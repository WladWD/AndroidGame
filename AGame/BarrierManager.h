#include "BarrierSetBase.h"
#include "BarrierSetDefault.h"
#include "ObjectCookie.h"

#pragma once
namespace Barrier
{
	class BarrierManager
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		float mAngle, fZOffset, mStepH;
		int32_t mMinCount, mMaxCount, mSectorsCount;
		float mRotateVelCollect;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		float mCookieMinYOffset, mCookieZOffset;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		glm::vec2 fFog;
		const float *fFogColor;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		float fHeight;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		Camera::MCamera * cCamera;
		GameEngine::GlobalMove * mGloablMove;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		BarrierSetBase *mBarrier;
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		Score::Score *mScore;
	public:
		BarrierManager(Resource::ResourceBase * mResourceLoad, Camera::MCamera *cCamera, GameEngine::GlobalMove *mGloablMove, 
			float fHeight, glm::vec2 fFog, const float *fFogColor, float fCookieMinYOffset,
			float mAngle, float fZOffset, float mStepH, int32_t mMinCount, int32_t mMaxCount, int32_t mSectorsCount, float mRotateVelCollect, 
			Resource::MapResource * mMapResource, Resource::TextureLoad * textureLoad, float mCookieZOffset, Score::Score *mScore);
		~BarrierManager();
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void DrawBarriers(void);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		bool Intersect(const Draw::CookieCollisionStruct &mCookieCollision);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void Upade(float fDeltaTime, float fGlobalTime);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void LoadSet(uint32_t SetIndex, Resource::ResourceBase * mResourceLoad, Resource::MapResource * mMapResource, Resource::TextureLoad * textureLoad);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	};
	//fHeight - height first barrier
}

