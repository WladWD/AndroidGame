#include "ResourceLoad.h"
#include "ShaderBarrierBase.h"
#include "Mesh.h"
#include "LoadStructure.h"
#include "MCamera.h"

#pragma once
namespace Bounding
{
	class ObjectBase
	{
	protected:
		//////////////////////////////////////////////////////////////////////////////////
		uint32_t mIndexCount;
		uint32_t mVertexCount;
		//////////////////////////////////////////////////////////////////////////////////
		Resource::ImageResource *mImagesResource;
		//////////////////////////////////////////////////////////////////////////////////
		Resource::ModelObject *mObjects;
		GLuint mDrawObjectCount;
		//////////////////////////////////////////////////////////////////////////////////
		GLenum mIndexFormat;
		//////////////////////////////////////////////////////////////////////////////////
		GLuint mVertexBuffer;//vertex buffer object
		GLuint mIndexBuffer;//element array object
		//////////////////////////////////////////////////////////////////////////////////
		//virtual void PackToOOBB(void) = 0;
		virtual void Init(std::string mResourceName, Resource::ResourceBase *mResourceLoad) = 0;
		//////////////////////////////////////////////////////////////////////////////////
		//virtual bool OOBBIntersect(const Mesh::OOBB *mObject1, const Mesh::OOBB *mObject2 , const glm::mat4* mWorld1, const glm::mat4 *mWorld2) = 0;
	public:
		ObjectBase(void);
		virtual ~ObjectBase(void);
		//////////////////////////////////////////////////////////////////////////////////
		void GetDrawData(GLenum &mIndexFormat, GLuint &mVertexBuffer, GLuint &mIndexBuffer, GLuint &mDrawObjectCount);
		//////////////////////////////////////////////////////////////////////////////////
		virtual void ReleaseResource(void) = 0;
		virtual void ReCreateResource(Resource::ResourceBase *resourceLoad) = 0;
		//////////////////////////////////////////////////////////////////////////////////
		Resource::ModelObject *GetModelObject(void);
		Resource::ImageResource *GetImageResource(void);
		//////////////////////////////////////////////////////////////////////////////////
		uint32_t GetVertexCount(void);
		uint32_t GetIndexCount(void);
	};
}

