#include "MShapeGenerator.h"
#include "ShaderPipeBase.h"
#include "MCamera.h"

#pragma once
namespace GameEngine
{
	class DrawPipeBase
	{
	protected:
		////////////////////////////////////////////////////////////////////////////////
		float fOffset;
		float fRadius;
		uint32_t V_Count;
		uint32_t U_Count;
		////////////////////////////////////////////////////////////////////////////////
		Resource::GLTextureResource glTexRes;
		////////////////////////////////////////////////////////////////////////////////
		const float *fFogColor;
		const float fFogStart, fFogRadius;
		////////////////////////////////////////////////////////////////////////////////
		Camera::MCamera *cCamera;
		////////////////////////////////////////////////////////////////////////////////
		Shader::ShaderPipeBase *mShaderPipe;
		////////////////////////////////////////////////////////////////////////////////
		GLuint vbBuffer, ibBuffer;
		uint32_t uCountCylinder;
		////////////////////////////////////////////////////////////////////////////////
		void DeleteResources(void);
		void CreateResources(void);
		////////////////////////////////////////////////////////////////////////////////
		virtual void InitAttrib(void) = 0;
	public:
		DrawPipeBase(Camera::MCamera *cCamera,
			float fOffset, float fRadius, uint32_t V_Count, uint32_t U_Count,
			float fFogStart, float fFogRadius, const float *fFogColor);
		~DrawPipeBase();
		////////////////////////////////////////////////////////////////////////////////
		virtual void ReleaseResource(void) = 0;
		virtual void ReCreateResource(Resource::ResourceBase *resourceLoad, Resource::TextureLoad *textureLoad, Resource::MapResource *mMapResource) = 0;
		////////////////////////////////////////////////////////////////////////////////
		virtual void Draw(const glm::mat4 *mWorld) = 0;
		////////////////////////////////////////////////////////////////////////////////
	};
}

