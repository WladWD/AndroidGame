#include "ResourceLoad.h"
#include "ShaderCookieBase.h"
#include "Mesh.h"
#include "LoadStructure.h"
#include "ObjectCookie.h"
#include "BoundingObjectStructSphere.h"
#include "MCamera.h"
#include "Cookie.h"
#include "BoundingSphereInstance.h"
#include "LowPolyModelInstance.h"

#pragma once
namespace DrawCookie
{
	class DrawCookieBase
	{
	protected:
		/////////////////////////////////////////////////////////////////////////////////////
		glm::mat4 mWorld;
		/////////////////////////////////////////////////////////////////////////////////////
		DrawCookie::CookieDestroy *mCookieDestroy;
		Collision::ModelBase *mModelDraw;
		Collision::BoundingSphereInstance *mSphere;
		Collision::LowPolyModelInstance *mLowpolyModel;
		//Bounding::ObjectCookie *mBounding;
		//Bounding::BoundingObjectStructSphere *mBoundingSphere;
		/////////////////////////////////////////////////////////////////////////////////////
		Camera::MCamera *cCamera;
		/////////////////////////////////////////////////////////////////////////////////////
	//	Resource::ImageResource *mImagesResource;
		/////////////////////////////////////////////////////////////////////////////////////
	//	Resource::ModelObject *mObjects;
	//	GLuint mDrawObjectCount;
		/////////////////////////////////////////////////////////////////////////////////////
	//	GLenum mIndexFormat;
		/////////////////////////////////////////////////////////////////////////////////////
	//	GLuint mVertexBuffer;//vertex buffer object
	//	GLuint mIndexBuffer;//element array object
		/////////////////////////////////////////////////////////////////////////////////////
		virtual void InitAttrib(void) = 0;
		/////////////////////////////////////////////////////////////////////////////////////
		//void InitBaseData(void);
	public:
		DrawCookieBase(Draw::Cookie *mCookie, Camera::MCamera *cCamera);//Bounding::ObjectCookie *mBounding
		virtual ~DrawCookieBase();
		/////////////////////////////////////////////////////////////////////////////////////
		virtual void Update(float fDeltaTime, float fGlobalTime) = 0;
		/////////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////
		virtual void Draw(void) = 0;
		virtual void DrawDestroyedCookie(void) = 0;
		/////////////////////////////////////////////////////////////////////////////////////
		const Collision::BoundingSphereInstance *GetBoundingSphere(void);
		const Collision::LowPolyModelInstance *GetLowPolyModel(void);
	};
}

