#include "PipeDrawControl.h"
#include "CookieDrawControl.h"
#include "TimerSteady.h"
#include "TimerHighResolution.h"
#include "DrawEndGameBlur.h"
#include <ctime>

#pragma once
namespace GameEngine
{
	class Engine
	{
		bool mStopUpdate;
		//////////////////////////////////////////////////////////////////////////////
		uint32_t width;
		uint32_t height;
		//////////////////////////////////////////////////////////////////////////////
		bool mSleepApplication;
		//////////////////////////////////////////////////////////////////////////////
		bool mIntersect, mEndGame;
		//////////////////////////////////////////////////////////////////////////////
		Timer::TimerBase *mTimer;
		//////////////////////////////////////////////////////////////////////////////
		const uint32_t uSectorsCount;
		const float fCylinderHeight, fCylinderRadius;
		const float fStartAttention, fEndAttention;
		const float fRotateAngle, fRotateTimeMs;
		const float fMoveSpeed;
		const float fCamOffset;
		const float fCookieMinYOffset;
		const float fFogColor[4] = { 0.23921f, 0.168627f, 0.121568f, 1.0f};//0.0f, 0.65098f, 0.057647f, 1.0f };//00A693  #01796F  #009E60 #808000 ACB78E 78866B 7BA05B
		//////////////////////////////////////////////////////////////////////////////
		Resource::MapResource *mMapResource;
		//////////////////////////////////////////////////////////////////////////////
		Camera::MCamera *cCamera;
		//////////////////////////////////////////////////////////////////////////////
		DrawCookie::CookieDrawControl *mDrawCookie;
		DrawPipe::PipeDrawControl *mDrawPipe;
		DrawCookie::EndGameDraw *mDrawEndGame;
		DrawFullScreen::DrawEndGameBlur *mDrawEndGameBlur;
		Score::Score *mScore;
		//////////////////////////////////////////////////////////////////////////////
		//void ReleaseResource(void);
		//void ReCreateResource(JNIEnv *env, jobject rmng);
		//////////////////////////////////////////////////////////////////////////////
		void Intersect(float fDeltaTime, float fGlobalTime);
		//////////////////////////////////////////////////////////////////////////////
		void SetOpenGLFeature(void);
	public:
		Engine(JNIEnv *env, jobject rmng);
		~Engine();
		//////////////////////////////////////////////////////////////////////////////
		void SetCookieDrawType(uint32_t mIndex, JNIEnv *env, jobject rmng);
		void SetPipeDrawType(uint32_t mIndex, JNIEnv *env, jobject rmng);
		//////////////////////////////////////////////////////////////////////////////
		void PauseApplication(void);
		void ResumeApplication(JNIEnv *env, jobject rmng);
		//////////////////////////////////////////////////////////////////////////////
		void Tick(void);
		//////////////////////////////////////////////////////////////////////////////
		bool Vibrate(void);
		bool EndGame(void);//float fDeltaTime, float fGlobalTime);
		//bool BlurEndGame(void);
		//////////////////////////////////////////////////////////////////////////////
		void RotateLeft(void);
		void RotateRight(void);
		//////////////////////////////////////////////////////////////////////////////
		void Resize(uint32_t width, uint32_t height);
		//////////////////////////////////////////////////////////////////////////////
		void Draw(void);//float fDeltaTime, float fGlobalTime);//ms
	};
}

