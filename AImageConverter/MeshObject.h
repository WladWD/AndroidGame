#include "LoadStructure.h"
#include <vector>

#pragma once
namespace MEngine
{
	class MeshObject
	{
		///////////////////////////////////////////////////////////////////////////////
		uint32_t index_buffer_offset;//содержит позицию 1 идекса а индексном буффере
		uint32_t index_count;//содержит количество индексов объекта
		///////////////////////////////////////////////////////////////////////////////
		std::vector<GLuint> mDiffuse_id;//содержит идентификатор материала в списке материалов
		///////////////////////////////////////////////////////////////////////////////
		std::vector<bool> use_alpha;//проверка на то используеться ли смешивание текстур(default value = false)
	public:
		MeshObject(void);
		~MeshObject();
		///////////////////////////////////////////////////////////////////////////////
		void SetTextureID(uint32_t id, bool UseAlpha);
		///////////////////////////////////////////////////////////////////////////////
		bool IsUseAlpha(uint32_t id) const;//возвращает поле use_alpha
		///////////////////////////////////////////////////////////////////////////////
		void SetIndexCount(uint32_t value);//установить количество индексов в объкте
		///////////////////////////////////////////////////////////////////////////////
		void SetStartIndex(uint32_t value);//установить индекс первого индекса меша в индексном буффере
		///////////////////////////////////////////////////////////////////////////////
		uint32_t GetIndexCount(void) const;//возвращает количество индексов в объкте
		///////////////////////////////////////////////////////////////////////////////
		uint32_t GetStartIndex(void) const;//возвращает индекс первого индекса меша в индексном буффере
		///////////////////////////////////////////////////////////////////////////////
		void GetMaterialID( std::vector<GLuint> ** Diffuse,  std::vector<bool> ** Aplha) ;//возвращает идентификатор материала
		///////////////////////////////////////////////////////////////////////////////
	};
}

//класс представляет свойства одного обьекта в сцене